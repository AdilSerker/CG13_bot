import { TelegrafContext } from "telegraf/typings/context";
import { TextListener } from "../../types";
import { randomInteger } from "../../components/utils/randomize";

import { messageRepository } from './../../infrastructure/repositories/MessageRepository';

const AGGRESSIVE_REPLAY = [
    '–∞–Ω—É—Å —Å–µ–±–µ –∑–∞–±–∞–Ω—å –ø–µ—Å',
    'C–õ–´–®–¨ –¢–ï –í–™–ï–ë–ê–¢–¨?!',
    '–∑–∞—á–µ–º —Ç—ã –º–µ–Ω—è —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å —Å—É–∫–∞',
    '–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ–Ω –≤—Ä–æ–¥–µ –µ—â–µ –∏ –±–ª–µ–Ω–¥–µ—Ä–∞—Å—Ç',
    '–µ—â–µ –æ–±–æ—Å—Å–∞—Ç—å –ø–æ—Ç–æ–º',
    '–º–æ–∂–Ω–æ –µ—â–µ –ø–∞—Ä—É –º–∞–∫—Å–µ—Ä–æ–≤ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å',
    '–æ—Å—É–∂–¥–∞—é',
    '–æ–¥–æ–±—Ä—è—é —ç—Ç—É –∏–¥–µ—é',
    '–¥–∞–≤–∞–π –ª—É—á—à–µ –æ—Ç–ø–∏–∑–¥–∏–º',
    '–Ø —Ç–µ–±–µ —â–∞—Å –±–∞–Ω–æ–º –ø–æ –≥—É–±–∞–º –ø–æ–≤–æ–∂—É'
];

const WEED_REPLAY = [
    '–µ—Å—Ç—å —á–µ?',
    '–∫–æ–≥–¥–∞ –ª–µ–≥–∞–ª–∞–π–∑?',
    '–ø—Å—Å, –ø—ã—Ö–Ω—É—Ç—å —Ö–æ—Ç–∏—Ç–µ?',
    '4:20',
    '—É–∂–µ –ø—Ä–∏–∫–æ–ª–æ—Ç–∏–ª –≤ —à—Ç–∞–∫–µ—Ç'
];

const ANSWERS_3DSOFT = [
    '–∞ –∫–∞–∫ –∫–∞–∫–∞—Ç—å?',
    '–µ—Å—Ç—å –æ–¥–∏–Ω –∫—É—Ä—Å, –º–æ–≥—É —Å—Å—ã–ª–æ—á–∫—É —Å –ø–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥–∞—Ç—å, –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ 70$'
];

const TUTOR_REPLAY = [
    '–ê —Å—Ä–∞—Ç—å —Ç—ã —Ç–æ–∂–µ –ø–æ —Ç—É—Ç–æ—Ä–∞–º —É—á–∏–ª—Å?',
    '–ë—ã—Ç—å —Ç—É–ø—ã–º –∫–æ–∂–∞–Ω—ã–º –º–µ—à–∫–æ–º —Ç–≤–æ–µ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ',
    '–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –∂–∏–∑–Ω–∏ –æ–±—Ä–µ—á–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–∞–ª',
    '–Ø –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–Ω–∏–∏ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–≤. –ß–µ–º –±–æ–ª—å—à–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–≤ —Ç–µ–º –ª—É—á—à–µ.\n–û–¥–∏–Ω –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç—É—Ç–æ—Ä —Å—Ä–∞–∑—É +10 –∫ iq. \n–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è –Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º –º–µ—à–æ–∫'
];

const BLENDER_REPLAY = [
    '–Ø —Ç–µ–±–µ —â–∞—Å –∫–æ–ª–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–µ–ª—é!'
];

const DISCORD_REPLAY = [
    '–ë—É–¥–µ—à—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—Ç?'
];

const AUE_REPLAY = [
    '–ñ–ò–ó–ù–¨ –ü–õ–Æ–°–ê–ú, –°–ú–ï–†–¢–¨ –®–ê–†–ü–ê–ú'
];

class Listners {
    static async matchBan(ctx: TelegrafContext) {
        messageRepository.saveMessage(ctx.update.message);

        const randomInt = randomInteger(0, 100);

        if (randomInt > 50) {
            const lastIdx = AGGRESSIVE_REPLAY.length - 1;
            await ctx.reply(AGGRESSIVE_REPLAY[randomInteger(0, lastIdx)]);
        }
    }

    static async matchLough(ctx: TelegrafContext) {
        messageRepository.saveMessage(ctx.update.message);

        const randomInt = randomInteger(0, 100);

        if (randomInt > 70) {
            await ctx.reply('–ü–•–ê–•–ê–•–ê–•–ê–•–ê–•–ü');
        }
    }

    static async matchSecret(ctx: TelegrafContext) {
        await ctx.reply('–Ω“âÃ¢ÃñÕïÕôÕôÃ≥ÕïÕïÃ≤ÕôÃ±Ã∞ÕîÕïÕà–µÃµÃ®ÃúÕìÃ¶ÕñÃôÃñÃúÕéÃ±Õç —Å“âÃ¢Ã≠ÃùÕçÃ±Ã•ÃÆÕïÃØÃ≤ÕÖÃ©—ÇÃ∂Ã°ÃúÕïÕîÃóÃüÕñÃ©Õï–æÃ∂Õ¢Ã¶ÕöÃ£Ã´ÕçÕçÃÆÃ≠ÕñÃ≥ÕçÃ†–∏Ã¥Õ¢Ã≥Ã¨ÕïÕôÃòÃñÕâÃ≠Ã•ÕìÃ≥ÕâÕîÕÖÃ´Ã≠—Ç“àÕ¢ÕîÃÆÃ¶ÕéÃóÃ≥Ã¨Ã§Ã≥ÕìÃ≠ÃúÕéÃñÃü' + ' ' + '–≤“àÕêÕÄÃãÃãÃøÕäÃêÃåÃÉÕôÃØÕâÃÆÃØ—Å“àÃøÕÉÕêÃöÕãÃûÃ¨ÕâÃ©Ã±ÕôÕÖÃúÃ±–∫“àÕÄÃÅÃêÃÇÕëÕåÕÇÕÇÃ£Ã¶Ã§ÕéÃ†ÕïÃ†ÕîÃ≠Ã†Ã™—ÄÃµÃÉÃÖÃÜÃöÃíÃøÕÄÃáÃçÃ†ÃñÃûÃòÕàÃüÃôÃó—ãÃ∂ÕõÕêÃÇÕÉÃâÃîÃ§ÃùÕïÕáÃûÕì–≤Ã¥ÕëÕÅÃÖÕÅÃÇÃãÕõÃΩÃØÃòÃ±ÃüÃûÃÆÕâÃ¶Õô–∞Ã∑ÃíÃãÃÑÕåÕÉÃΩÕåÕàÃùÕÖÃóÃ¨ÕÖÕçÕÖ—Ç“âÃéÃéÕÇÕäÕÜÕÉÕñÃüÃ≥Ã≠ÃùÃ†Ã£—åÃ∑ÕÉÕëÃÇÕÅÕÑÃÜÕÑÕÖÃóÃÆÃ¨ÃÆ');
    }

    static async matchQuestion(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 50) {
            await ctx.reply(ANSWERS_3DSOFT[randomInteger(0, ANSWERS_3DSOFT.length - 1)]);
        }
    }

    static async matchBake(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 50) {
            await ctx.reply('–ê–Ω—É—Å —Å–µ–±–µ –∑–∞–ø–µ–∫–∏!');
        }
    }

    static async matchWeed(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 90 || randomInteger(0, 100) > 50 && ctx.update.message.from.id === 230392366) {
            await ctx.reply(WEED_REPLAY[randomInteger(0, WEED_REPLAY.length - 1)]);
        }
    }

    static async matchTutor(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 70 || randomInteger(0, 100) > 50 && ctx.update.message.from.id === 341554801) {
            await ctx.reply(TUTOR_REPLAY[randomInteger(0, TUTOR_REPLAY.length - 1)]);
        }
    }

    static async matchBlender(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 70) {
            await ctx.reply(BLENDER_REPLAY[randomInteger(0, BLENDER_REPLAY.length - 1)]);
        }
    }

    static async matchDiscord(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 90) {
            await ctx.reply(DISCORD_REPLAY[randomInteger(0, DISCORD_REPLAY.length - 1)]);
        }
    }

    static async matchAye(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 70) {
            await ctx.reply(AUE_REPLAY[randomInteger(0, AUE_REPLAY.length - 1)]);
        }
    }

    static async matchYes(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 98) {
            await ctx.reply('—Ö—É–π –ù–ê!!');
        }
    }

    static async matchNo(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 98) {
            await ctx.reply('–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç! üòé');
        }
    }

    static async matchWhat(ctx: TelegrafContext) {
        if (randomInteger(0, 100) > 98) {
            await ctx.reply('—Ö—É–π –≤');
            await ctx.reply('–û');
            await ctx.reply('–ß');
            await ctx.reply('–û');
        }
    }
}

export const textListeners: TextListener[] = [
    {
        match: ['–±–∞–Ω', '–ë–∞–Ω', ',fy'],
        middleware: Listners.matchBan
    },
    {
        match: [/ban/i, /–∑–∞–±–∞–Ω/i, /–±–∞–Ω–∏–º/i],
        middleware: Listners.matchBan
    },
    {
        match: [/(–∫–∞–∫.*–∑–∞–ø–µ—á—å)/i, /–∑–∞–ø–µ–∫/i, /–±–µ–π–∫/i],
        middleware: Listners.matchBake
    },
    {
        match: [/—Ç—É—Ç–æ—Ä/i, /—É—Ä–æ–∫/i, /–∫—É—Ä—Å/i],
        middleware: Listners.matchTutor
    },
    {
        match: [/–∞—Ö–∞—Ö–∞/i],
        middleware: Listners.matchLough
    },
    {
        match: [/–≤ –ø—Ä–∞–≥/i,/—á–µ—Ö–∏/i,/–ü—Ä–∞–≥–∞/i,],
        middleware: Listners.matchWeed
    },
    {
        match: [/(–∫–∞–∫.*–¥–µ–ª–∞—Ç—å)/i, /(–∫–∞–∫.*—Å–¥–µ–ª–∞—Ç—å)/i, /(–∫–∞–∫.*–∑–∞–º–æ–¥–µ–ª–∏—Ç—å)/i, /(–∫–∞–∫.*–≤ –º–∞–π–µ)/i, /(–∫–∞–∫.*–≤ –∑–µ–±—Ä–µ)/i],
        middleware: Listners.matchQuestion
    },
    {
        match: [/blender/i, /–±–ª–µ–Ω–¥–µ—Ä/i],
        middleware: Listners.matchBlender
    },
    {
        match: [/(–ø–æ–π–¥–µ–º.–≤ –¥–∏—Å–∫*)/i, /(–≥–æ.–≤ –¥–∏—Å–∫*)/i, /(–≤ –¥–∏—Å–∫.?)/i],
        middleware: Listners.matchDiscord
    },
    {
        match: [/( –∞—É–µ)/i, /(–∞—É–µ )/i],
        middleware: Listners.matchAye
    },
    {
        match: ['–∞—É–µ', '–ê—É–µ', '–ê–£–ï'],
        middleware: Listners.matchAye
    },
    {
        match: ['–¥–∞', '–î–∞', '–î–ê'],
        middleware: Listners.matchYes
    },
    {
        match: ['–Ω–µ—Ç', '–ù–µ—Ç', '–ù–ï–¢'],
        middleware: Listners.matchNo
    },
    {
        match: ['—á–µ', '–ß–µ', '–ß–ï', '—á–æ', '–ß–æ', '–ß–û',],
        middleware: Listners.matchWhat
    }
];